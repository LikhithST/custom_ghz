//*******************************************************************************
// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Apache License 2.0 which is available at
// http://www.apache.org/licenses/LICENSE-2.0
//
// SPDX-License-Identifier: Apache-2.0
//******************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: types.proto

// I added V1 as in databroker. Is this good practice?

package v1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VSS Data type of a signal
//
// Protobuf doesn't support int8, int16, uint8 or uint16.
// These are mapped to int32 and uint32 respectively.
type DataType int32

const (
	DataType_DATA_TYPE_UNSPECIFIED     DataType = 0
	DataType_DATA_TYPE_STRING          DataType = 1
	DataType_DATA_TYPE_BOOLEAN         DataType = 2
	DataType_DATA_TYPE_INT8            DataType = 3
	DataType_DATA_TYPE_INT16           DataType = 4
	DataType_DATA_TYPE_INT32           DataType = 5
	DataType_DATA_TYPE_INT64           DataType = 6
	DataType_DATA_TYPE_UINT8           DataType = 7
	DataType_DATA_TYPE_UINT16          DataType = 8
	DataType_DATA_TYPE_UINT32          DataType = 9
	DataType_DATA_TYPE_UINT64          DataType = 10
	DataType_DATA_TYPE_FLOAT           DataType = 11
	DataType_DATA_TYPE_DOUBLE          DataType = 12
	DataType_DATA_TYPE_TIMESTAMP       DataType = 13
	DataType_DATA_TYPE_STRING_ARRAY    DataType = 20
	DataType_DATA_TYPE_BOOLEAN_ARRAY   DataType = 21
	DataType_DATA_TYPE_INT8_ARRAY      DataType = 22
	DataType_DATA_TYPE_INT16_ARRAY     DataType = 23
	DataType_DATA_TYPE_INT32_ARRAY     DataType = 24
	DataType_DATA_TYPE_INT64_ARRAY     DataType = 25
	DataType_DATA_TYPE_UINT8_ARRAY     DataType = 26
	DataType_DATA_TYPE_UINT16_ARRAY    DataType = 27
	DataType_DATA_TYPE_UINT32_ARRAY    DataType = 28
	DataType_DATA_TYPE_UINT64_ARRAY    DataType = 29
	DataType_DATA_TYPE_FLOAT_ARRAY     DataType = 30
	DataType_DATA_TYPE_DOUBLE_ARRAY    DataType = 31
	DataType_DATA_TYPE_TIMESTAMP_ARRAY DataType = 32
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "DATA_TYPE_UNSPECIFIED",
		1:  "DATA_TYPE_STRING",
		2:  "DATA_TYPE_BOOLEAN",
		3:  "DATA_TYPE_INT8",
		4:  "DATA_TYPE_INT16",
		5:  "DATA_TYPE_INT32",
		6:  "DATA_TYPE_INT64",
		7:  "DATA_TYPE_UINT8",
		8:  "DATA_TYPE_UINT16",
		9:  "DATA_TYPE_UINT32",
		10: "DATA_TYPE_UINT64",
		11: "DATA_TYPE_FLOAT",
		12: "DATA_TYPE_DOUBLE",
		13: "DATA_TYPE_TIMESTAMP",
		20: "DATA_TYPE_STRING_ARRAY",
		21: "DATA_TYPE_BOOLEAN_ARRAY",
		22: "DATA_TYPE_INT8_ARRAY",
		23: "DATA_TYPE_INT16_ARRAY",
		24: "DATA_TYPE_INT32_ARRAY",
		25: "DATA_TYPE_INT64_ARRAY",
		26: "DATA_TYPE_UINT8_ARRAY",
		27: "DATA_TYPE_UINT16_ARRAY",
		28: "DATA_TYPE_UINT32_ARRAY",
		29: "DATA_TYPE_UINT64_ARRAY",
		30: "DATA_TYPE_FLOAT_ARRAY",
		31: "DATA_TYPE_DOUBLE_ARRAY",
		32: "DATA_TYPE_TIMESTAMP_ARRAY",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED":     0,
		"DATA_TYPE_STRING":          1,
		"DATA_TYPE_BOOLEAN":         2,
		"DATA_TYPE_INT8":            3,
		"DATA_TYPE_INT16":           4,
		"DATA_TYPE_INT32":           5,
		"DATA_TYPE_INT64":           6,
		"DATA_TYPE_UINT8":           7,
		"DATA_TYPE_UINT16":          8,
		"DATA_TYPE_UINT32":          9,
		"DATA_TYPE_UINT64":          10,
		"DATA_TYPE_FLOAT":           11,
		"DATA_TYPE_DOUBLE":          12,
		"DATA_TYPE_TIMESTAMP":       13,
		"DATA_TYPE_STRING_ARRAY":    20,
		"DATA_TYPE_BOOLEAN_ARRAY":   21,
		"DATA_TYPE_INT8_ARRAY":      22,
		"DATA_TYPE_INT16_ARRAY":     23,
		"DATA_TYPE_INT32_ARRAY":     24,
		"DATA_TYPE_INT64_ARRAY":     25,
		"DATA_TYPE_UINT8_ARRAY":     26,
		"DATA_TYPE_UINT16_ARRAY":    27,
		"DATA_TYPE_UINT32_ARRAY":    28,
		"DATA_TYPE_UINT64_ARRAY":    29,
		"DATA_TYPE_FLOAT_ARRAY":     30,
		"DATA_TYPE_DOUBLE_ARRAY":    31,
		"DATA_TYPE_TIMESTAMP_ARRAY": 32,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

// Entry type
type EntryType int32

const (
	EntryType_ENTRY_TYPE_UNSPECIFIED EntryType = 0
	EntryType_ENTRY_TYPE_ATTRIBUTE   EntryType = 1
	EntryType_ENTRY_TYPE_SENSOR      EntryType = 2
	EntryType_ENTRY_TYPE_ACTUATOR    EntryType = 3
)

// Enum value maps for EntryType.
var (
	EntryType_name = map[int32]string{
		0: "ENTRY_TYPE_UNSPECIFIED",
		1: "ENTRY_TYPE_ATTRIBUTE",
		2: "ENTRY_TYPE_SENSOR",
		3: "ENTRY_TYPE_ACTUATOR",
	}
	EntryType_value = map[string]int32{
		"ENTRY_TYPE_UNSPECIFIED": 0,
		"ENTRY_TYPE_ATTRIBUTE":   1,
		"ENTRY_TYPE_SENSOR":      2,
		"ENTRY_TYPE_ACTUATOR":    3,
	}
)

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (EntryType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x EntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntryType.Descriptor instead.
func (EntryType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

// A `View` specifies a set of fields which should
// be populated in a `DataEntry` (in a response message)
type View int32

const (
	View_VIEW_UNSPECIFIED   View = 0  // Unspecified. Equivalent to VIEW_CURRENT_VALUE unless `fields` are explicitly set.
	View_VIEW_CURRENT_VALUE View = 1  // Populate DataEntry with value.
	View_VIEW_TARGET_VALUE  View = 2  // Populate DataEntry with actuator target.
	View_VIEW_METADATA      View = 3  // Populate DataEntry with metadata.
	View_VIEW_FIELDS        View = 10 // Populate DataEntry only with requested fields.
	View_VIEW_ALL           View = 20 // Populate DataEntry with everything.
)

// Enum value maps for View.
var (
	View_name = map[int32]string{
		0:  "VIEW_UNSPECIFIED",
		1:  "VIEW_CURRENT_VALUE",
		2:  "VIEW_TARGET_VALUE",
		3:  "VIEW_METADATA",
		10: "VIEW_FIELDS",
		20: "VIEW_ALL",
	}
	View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_CURRENT_VALUE": 1,
		"VIEW_TARGET_VALUE":  2,
		"VIEW_METADATA":      3,
		"VIEW_FIELDS":        10,
		"VIEW_ALL":           20,
	}
)

func (x View) Enum() *View {
	p := new(View)
	*p = x
	return p
}

func (x View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (View) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (View) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use View.Descriptor instead.
func (View) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

// A `Field` corresponds to a specific field of a `DataEntry`.
//
// It can be used to:
//   - populate only specific fields of a `DataEntry` response.
//   - specify which fields of a `DataEntry` should be set as
//     part of a `Set` request.
//   - subscribe to only specific fields of a data entry.
//   - convey which fields of an updated `DataEntry` have changed.
type Field int32

const (
	Field_FIELD_UNSPECIFIED                Field = 0  // "*" i.e. everything
	Field_FIELD_PATH                       Field = 1  // path
	Field_FIELD_VALUE                      Field = 2  // value
	Field_FIELD_ACTUATOR_TARGET            Field = 3  // actuator_target
	Field_FIELD_METADATA                   Field = 10 // metadata.*
	Field_FIELD_METADATA_DATA_TYPE         Field = 11 // metadata.data_type
	Field_FIELD_METADATA_DESCRIPTION       Field = 12 // metadata.description
	Field_FIELD_METADATA_ENTRY_TYPE        Field = 13 // metadata.entry_type
	Field_FIELD_METADATA_COMMENT           Field = 14 // metadata.comment
	Field_FIELD_METADATA_DEPRECATION       Field = 15 // metadata.deprecation
	Field_FIELD_METADATA_UNIT              Field = 16 // metadata.unit
	Field_FIELD_METADATA_VALUE_RESTRICTION Field = 17 // metadata.value_restriction.*
	Field_FIELD_METADATA_ACTUATOR          Field = 20 // metadata.actuator.*
	Field_FIELD_METADATA_SENSOR            Field = 30 // metadata.sensor.*
	Field_FIELD_METADATA_ATTRIBUTE         Field = 40 // metadata.attribute.*
)

// Enum value maps for Field.
var (
	Field_name = map[int32]string{
		0:  "FIELD_UNSPECIFIED",
		1:  "FIELD_PATH",
		2:  "FIELD_VALUE",
		3:  "FIELD_ACTUATOR_TARGET",
		10: "FIELD_METADATA",
		11: "FIELD_METADATA_DATA_TYPE",
		12: "FIELD_METADATA_DESCRIPTION",
		13: "FIELD_METADATA_ENTRY_TYPE",
		14: "FIELD_METADATA_COMMENT",
		15: "FIELD_METADATA_DEPRECATION",
		16: "FIELD_METADATA_UNIT",
		17: "FIELD_METADATA_VALUE_RESTRICTION",
		20: "FIELD_METADATA_ACTUATOR",
		30: "FIELD_METADATA_SENSOR",
		40: "FIELD_METADATA_ATTRIBUTE",
	}
	Field_value = map[string]int32{
		"FIELD_UNSPECIFIED":                0,
		"FIELD_PATH":                       1,
		"FIELD_VALUE":                      2,
		"FIELD_ACTUATOR_TARGET":            3,
		"FIELD_METADATA":                   10,
		"FIELD_METADATA_DATA_TYPE":         11,
		"FIELD_METADATA_DESCRIPTION":       12,
		"FIELD_METADATA_ENTRY_TYPE":        13,
		"FIELD_METADATA_COMMENT":           14,
		"FIELD_METADATA_DEPRECATION":       15,
		"FIELD_METADATA_UNIT":              16,
		"FIELD_METADATA_VALUE_RESTRICTION": 17,
		"FIELD_METADATA_ACTUATOR":          20,
		"FIELD_METADATA_SENSOR":            30,
		"FIELD_METADATA_ATTRIBUTE":         40,
	}
)

func (x Field) Enum() *Field {
	p := new(Field)
	*p = x
	return p
}

func (x Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[3].Descriptor()
}

func (Field) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[3]
}

func (x Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field.Descriptor instead.
func (Field) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

// Describes a VSS entry
// When requesting an entry, the amount of information returned can
// be controlled by specifying either a `View` or a set of `Field`s.
type DataEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Defines the full VSS path of the entry.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // [field: FIELD_PATH]
	// The value (datapoint)
	Value *Datapoint `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // [field: FIELD_VALUE]
	// Actuator target (only used if the entry is an actuator)
	ActuatorTarget *Datapoint `protobuf:"bytes,3,opt,name=actuator_target,json=actuatorTarget,proto3" json:"actuator_target,omitempty"` // [field: FIELD_ACTUATOR_TARGET]
	// Metadata for this entry
	Metadata      *Metadata `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"` // [field: FIELD_METADATA]
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataEntry) Reset() {
	*x = DataEntry{}
	mi := &file_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataEntry) ProtoMessage() {}

func (x *DataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataEntry.ProtoReflect.Descriptor instead.
func (*DataEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *DataEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DataEntry) GetValue() *Datapoint {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DataEntry) GetActuatorTarget() *Datapoint {
	if x != nil {
		return x.ActuatorTarget
	}
	return nil
}

func (x *DataEntry) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Datapoint struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Timestamp *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*Datapoint_String_
	//	*Datapoint_Bool
	//	*Datapoint_Int32
	//	*Datapoint_Int64
	//	*Datapoint_Uint32
	//	*Datapoint_Uint64
	//	*Datapoint_Float
	//	*Datapoint_Double
	//	*Datapoint_StringArray
	//	*Datapoint_BoolArray
	//	*Datapoint_Int32Array
	//	*Datapoint_Int64Array
	//	*Datapoint_Uint32Array
	//	*Datapoint_Uint64Array
	//	*Datapoint_FloatArray
	//	*Datapoint_DoubleArray
	Value         isDatapoint_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Datapoint) Reset() {
	*x = Datapoint{}
	mi := &file_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datapoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datapoint) ProtoMessage() {}

func (x *Datapoint) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datapoint.ProtoReflect.Descriptor instead.
func (*Datapoint) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *Datapoint) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Datapoint) GetValue() isDatapoint_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Datapoint) GetString_() string {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_String_); ok {
			return x.String_
		}
	}
	return ""
}

func (x *Datapoint) GetBool() bool {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Bool); ok {
			return x.Bool
		}
	}
	return false
}

func (x *Datapoint) GetInt32() int32 {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Int32); ok {
			return x.Int32
		}
	}
	return 0
}

func (x *Datapoint) GetInt64() int64 {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Int64); ok {
			return x.Int64
		}
	}
	return 0
}

func (x *Datapoint) GetUint32() uint32 {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Uint32); ok {
			return x.Uint32
		}
	}
	return 0
}

func (x *Datapoint) GetUint64() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Uint64); ok {
			return x.Uint64
		}
	}
	return 0
}

func (x *Datapoint) GetFloat() float32 {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Float); ok {
			return x.Float
		}
	}
	return 0
}

func (x *Datapoint) GetDouble() float64 {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Double); ok {
			return x.Double
		}
	}
	return 0
}

func (x *Datapoint) GetStringArray() *StringArray {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_StringArray); ok {
			return x.StringArray
		}
	}
	return nil
}

func (x *Datapoint) GetBoolArray() *BoolArray {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_BoolArray); ok {
			return x.BoolArray
		}
	}
	return nil
}

func (x *Datapoint) GetInt32Array() *Int32Array {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Int32Array); ok {
			return x.Int32Array
		}
	}
	return nil
}

func (x *Datapoint) GetInt64Array() *Int64Array {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Int64Array); ok {
			return x.Int64Array
		}
	}
	return nil
}

func (x *Datapoint) GetUint32Array() *Uint32Array {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Uint32Array); ok {
			return x.Uint32Array
		}
	}
	return nil
}

func (x *Datapoint) GetUint64Array() *Uint64Array {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_Uint64Array); ok {
			return x.Uint64Array
		}
	}
	return nil
}

func (x *Datapoint) GetFloatArray() *FloatArray {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_FloatArray); ok {
			return x.FloatArray
		}
	}
	return nil
}

func (x *Datapoint) GetDoubleArray() *DoubleArray {
	if x != nil {
		if x, ok := x.Value.(*Datapoint_DoubleArray); ok {
			return x.DoubleArray
		}
	}
	return nil
}

type isDatapoint_Value interface {
	isDatapoint_Value()
}

type Datapoint_String_ struct {
	String_ string `protobuf:"bytes,11,opt,name=string,proto3,oneof"`
}

type Datapoint_Bool struct {
	Bool bool `protobuf:"varint,12,opt,name=bool,proto3,oneof"`
}

type Datapoint_Int32 struct {
	Int32 int32 `protobuf:"zigzag32,13,opt,name=int32,proto3,oneof"`
}

type Datapoint_Int64 struct {
	Int64 int64 `protobuf:"zigzag64,14,opt,name=int64,proto3,oneof"`
}

type Datapoint_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,15,opt,name=uint32,proto3,oneof"`
}

type Datapoint_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,16,opt,name=uint64,proto3,oneof"`
}

type Datapoint_Float struct {
	Float float32 `protobuf:"fixed32,17,opt,name=float,proto3,oneof"`
}

type Datapoint_Double struct {
	Double float64 `protobuf:"fixed64,18,opt,name=double,proto3,oneof"`
}

type Datapoint_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,21,opt,name=string_array,json=stringArray,proto3,oneof"`
}

type Datapoint_BoolArray struct {
	BoolArray *BoolArray `protobuf:"bytes,22,opt,name=bool_array,json=boolArray,proto3,oneof"`
}

type Datapoint_Int32Array struct {
	Int32Array *Int32Array `protobuf:"bytes,23,opt,name=int32_array,json=int32Array,proto3,oneof"`
}

type Datapoint_Int64Array struct {
	Int64Array *Int64Array `protobuf:"bytes,24,opt,name=int64_array,json=int64Array,proto3,oneof"`
}

type Datapoint_Uint32Array struct {
	Uint32Array *Uint32Array `protobuf:"bytes,25,opt,name=uint32_array,json=uint32Array,proto3,oneof"`
}

type Datapoint_Uint64Array struct {
	Uint64Array *Uint64Array `protobuf:"bytes,26,opt,name=uint64_array,json=uint64Array,proto3,oneof"`
}

type Datapoint_FloatArray struct {
	FloatArray *FloatArray `protobuf:"bytes,27,opt,name=float_array,json=floatArray,proto3,oneof"`
}

type Datapoint_DoubleArray struct {
	DoubleArray *DoubleArray `protobuf:"bytes,28,opt,name=double_array,json=doubleArray,proto3,oneof"`
}

func (*Datapoint_String_) isDatapoint_Value() {}

func (*Datapoint_Bool) isDatapoint_Value() {}

func (*Datapoint_Int32) isDatapoint_Value() {}

func (*Datapoint_Int64) isDatapoint_Value() {}

func (*Datapoint_Uint32) isDatapoint_Value() {}

func (*Datapoint_Uint64) isDatapoint_Value() {}

func (*Datapoint_Float) isDatapoint_Value() {}

func (*Datapoint_Double) isDatapoint_Value() {}

func (*Datapoint_StringArray) isDatapoint_Value() {}

func (*Datapoint_BoolArray) isDatapoint_Value() {}

func (*Datapoint_Int32Array) isDatapoint_Value() {}

func (*Datapoint_Int64Array) isDatapoint_Value() {}

func (*Datapoint_Uint32Array) isDatapoint_Value() {}

func (*Datapoint_Uint64Array) isDatapoint_Value() {}

func (*Datapoint_FloatArray) isDatapoint_Value() {}

func (*Datapoint_DoubleArray) isDatapoint_Value() {}

type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data type
	// The VSS data type of the entry (i.e. the value, min, max etc).
	//
	// NOTE: protobuf doesn't have int8, int16, uint8 or uint16 which means
	// that these values must be serialized as int32 and uint32 respectively.
	DataType DataType `protobuf:"varint,11,opt,name=data_type,json=dataType,proto3,enum=kuksa.val.v1.DataType" json:"data_type,omitempty"` // [field: FIELD_METADATA_DATA_TYPE]
	// Entry type
	EntryType EntryType `protobuf:"varint,12,opt,name=entry_type,json=entryType,proto3,enum=kuksa.val.v1.EntryType" json:"entry_type,omitempty"` // [field: FIELD_METADATA_ENTRY_TYPE]
	// Description
	// Describes the meaning and content of the entry.
	Description *string `protobuf:"bytes,13,opt,name=description,proto3,oneof" json:"description,omitempty"` // [field: FIELD_METADATA_DESCRIPTION]
	// Comment [optional]
	// A comment can be used to provide additional informal information
	// on a entry.
	Comment *string `protobuf:"bytes,14,opt,name=comment,proto3,oneof" json:"comment,omitempty"` // [field: FIELD_METADATA_COMMENT]
	// Deprecation [optional]
	// Whether this entry is deprecated. Can contain recommendations of what
	// to use instead.
	Deprecation *string `protobuf:"bytes,15,opt,name=deprecation,proto3,oneof" json:"deprecation,omitempty"` // [field: FIELD_METADATA_DEPRECATION]
	// Unit [optional]
	// The unit of measurement
	Unit *string `protobuf:"bytes,16,opt,name=unit,proto3,oneof" json:"unit,omitempty"` // [field: FIELD_METADATA_UNIT]
	// Value restrictions [optional]
	// Restrict which values are allowed.
	// Only restrictions matching the DataType {datatype} above are valid.
	ValueRestriction     *ValueRestriction `protobuf:"bytes,17,opt,name=value_restriction,json=valueRestriction,proto3" json:"value_restriction,omitempty"` // [field: FIELD_METADATA_VALUE_RESTRICTION]
	StreamResponseTimeNs *string           `protobuf:"bytes,18,opt,name=stream_response_time_ns,json=streamResponseTimeNs,proto3,oneof" json:"stream_response_time_ns,omitempty"`
	SubscriptionId       *string           `protobuf:"bytes,19,opt,name=subscription_id,json=subscriptionId,proto3,oneof" json:"subscription_id,omitempty"`
	// Entry type specific metadata
	//
	// Types that are valid to be assigned to EntrySpecific:
	//
	//	*Metadata_Actuator
	//	*Metadata_Sensor
	//	*Metadata_Attribute
	EntrySpecific isMetadata_EntrySpecific `protobuf_oneof:"entry_specific"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *Metadata) GetEntryType() EntryType {
	if x != nil {
		return x.EntryType
	}
	return EntryType_ENTRY_TYPE_UNSPECIFIED
}

func (x *Metadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Metadata) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *Metadata) GetDeprecation() string {
	if x != nil && x.Deprecation != nil {
		return *x.Deprecation
	}
	return ""
}

func (x *Metadata) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *Metadata) GetValueRestriction() *ValueRestriction {
	if x != nil {
		return x.ValueRestriction
	}
	return nil
}

func (x *Metadata) GetStreamResponseTimeNs() string {
	if x != nil && x.StreamResponseTimeNs != nil {
		return *x.StreamResponseTimeNs
	}
	return ""
}

func (x *Metadata) GetSubscriptionId() string {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return ""
}

func (x *Metadata) GetEntrySpecific() isMetadata_EntrySpecific {
	if x != nil {
		return x.EntrySpecific
	}
	return nil
}

func (x *Metadata) GetActuator() *Actuator {
	if x != nil {
		if x, ok := x.EntrySpecific.(*Metadata_Actuator); ok {
			return x.Actuator
		}
	}
	return nil
}

func (x *Metadata) GetSensor() *Sensor {
	if x != nil {
		if x, ok := x.EntrySpecific.(*Metadata_Sensor); ok {
			return x.Sensor
		}
	}
	return nil
}

func (x *Metadata) GetAttribute() *Attribute {
	if x != nil {
		if x, ok := x.EntrySpecific.(*Metadata_Attribute); ok {
			return x.Attribute
		}
	}
	return nil
}

type isMetadata_EntrySpecific interface {
	isMetadata_EntrySpecific()
}

type Metadata_Actuator struct {
	Actuator *Actuator `protobuf:"bytes,20,opt,name=actuator,proto3,oneof"` // [field: FIELD_METADATA_ACTUATOR]
}

type Metadata_Sensor struct {
	Sensor *Sensor `protobuf:"bytes,30,opt,name=sensor,proto3,oneof"` // [field: FIELD_METADATA_SENSOR]
}

type Metadata_Attribute struct {
	Attribute *Attribute `protobuf:"bytes,40,opt,name=attribute,proto3,oneof"` // [field: FIELD_METADATA_ATTRIBUTE]
}

func (*Metadata_Actuator) isMetadata_EntrySpecific() {}

func (*Metadata_Sensor) isMetadata_EntrySpecific() {}

func (*Metadata_Attribute) isMetadata_EntrySpecific() {}

// /////////////////////
// Actuator specific fields
type Actuator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Actuator) Reset() {
	*x = Actuator{}
	mi := &file_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Actuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actuator) ProtoMessage() {}

func (x *Actuator) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actuator.ProtoReflect.Descriptor instead.
func (*Actuator) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

// //////////////////////
// Sensor specific
type Sensor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	mi := &file_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

// //////////////////////
// Attribute specific
type Attribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	mi := &file_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

// Value restriction
//
// One ValueRestriction{type} for each type, since
// they don't make sense unless the types match
type ValueRestriction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ValueRestriction_String_
	//	*ValueRestriction_Signed
	//	*ValueRestriction_Unsigned
	//	*ValueRestriction_FloatingPoint
	Type          isValueRestriction_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueRestriction) Reset() {
	*x = ValueRestriction{}
	mi := &file_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRestriction) ProtoMessage() {}

func (x *ValueRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRestriction.ProtoReflect.Descriptor instead.
func (*ValueRestriction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *ValueRestriction) GetType() isValueRestriction_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ValueRestriction) GetString_() *ValueRestrictionString {
	if x != nil {
		if x, ok := x.Type.(*ValueRestriction_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *ValueRestriction) GetSigned() *ValueRestrictionInt {
	if x != nil {
		if x, ok := x.Type.(*ValueRestriction_Signed); ok {
			return x.Signed
		}
	}
	return nil
}

func (x *ValueRestriction) GetUnsigned() *ValueRestrictionUint {
	if x != nil {
		if x, ok := x.Type.(*ValueRestriction_Unsigned); ok {
			return x.Unsigned
		}
	}
	return nil
}

func (x *ValueRestriction) GetFloatingPoint() *ValueRestrictionFloat {
	if x != nil {
		if x, ok := x.Type.(*ValueRestriction_FloatingPoint); ok {
			return x.FloatingPoint
		}
	}
	return nil
}

type isValueRestriction_Type interface {
	isValueRestriction_Type()
}

type ValueRestriction_String_ struct {
	String_ *ValueRestrictionString `protobuf:"bytes,21,opt,name=string,proto3,oneof"`
}

type ValueRestriction_Signed struct {
	// For signed VSS integers
	Signed *ValueRestrictionInt `protobuf:"bytes,22,opt,name=signed,proto3,oneof"`
}

type ValueRestriction_Unsigned struct {
	// For unsigned VSS integers
	Unsigned *ValueRestrictionUint `protobuf:"bytes,23,opt,name=unsigned,proto3,oneof"`
}

type ValueRestriction_FloatingPoint struct {
	// For floating point VSS values (float and double)
	FloatingPoint *ValueRestrictionFloat `protobuf:"bytes,24,opt,name=floating_point,json=floatingPoint,proto3,oneof"`
}

func (*ValueRestriction_String_) isValueRestriction_Type() {}

func (*ValueRestriction_Signed) isValueRestriction_Type() {}

func (*ValueRestriction_Unsigned) isValueRestriction_Type() {}

func (*ValueRestriction_FloatingPoint) isValueRestriction_Type() {}

type ValueRestrictionInt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Min           *int64                 `protobuf:"zigzag64,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max           *int64                 `protobuf:"zigzag64,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	AllowedValues []int64                `protobuf:"zigzag64,3,rep,packed,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueRestrictionInt) Reset() {
	*x = ValueRestrictionInt{}
	mi := &file_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueRestrictionInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRestrictionInt) ProtoMessage() {}

func (x *ValueRestrictionInt) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRestrictionInt.ProtoReflect.Descriptor instead.
func (*ValueRestrictionInt) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *ValueRestrictionInt) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *ValueRestrictionInt) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *ValueRestrictionInt) GetAllowedValues() []int64 {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

type ValueRestrictionUint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Min           *uint64                `protobuf:"varint,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max           *uint64                `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	AllowedValues []uint64               `protobuf:"varint,3,rep,packed,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueRestrictionUint) Reset() {
	*x = ValueRestrictionUint{}
	mi := &file_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueRestrictionUint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRestrictionUint) ProtoMessage() {}

func (x *ValueRestrictionUint) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRestrictionUint.ProtoReflect.Descriptor instead.
func (*ValueRestrictionUint) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *ValueRestrictionUint) GetMin() uint64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *ValueRestrictionUint) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *ValueRestrictionUint) GetAllowedValues() []uint64 {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

type ValueRestrictionFloat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Min   *float64               `protobuf:"fixed64,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max   *float64               `protobuf:"fixed64,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// allowed for doubles/floats not recommended
	AllowedValues []float64 `protobuf:"fixed64,3,rep,packed,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueRestrictionFloat) Reset() {
	*x = ValueRestrictionFloat{}
	mi := &file_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueRestrictionFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRestrictionFloat) ProtoMessage() {}

func (x *ValueRestrictionFloat) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRestrictionFloat.ProtoReflect.Descriptor instead.
func (*ValueRestrictionFloat) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *ValueRestrictionFloat) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *ValueRestrictionFloat) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *ValueRestrictionFloat) GetAllowedValues() []float64 {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

// min, max doesn't make much sense for a string
type ValueRestrictionString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AllowedValues []string               `protobuf:"bytes,3,rep,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueRestrictionString) Reset() {
	*x = ValueRestrictionString{}
	mi := &file_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueRestrictionString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueRestrictionString) ProtoMessage() {}

func (x *ValueRestrictionString) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueRestrictionString.ProtoReflect.Descriptor instead.
func (*ValueRestrictionString) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *ValueRestrictionString) GetAllowedValues() []string {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

// Error response shall be an HTTP-like code.
// Should follow https://www.w3.org/TR/viss2-transport/#status-codes.
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Used in get/set requests to report errors for specific entries
type DataEntryError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // vss path
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataEntryError) Reset() {
	*x = DataEntryError{}
	mi := &file_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataEntryError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataEntryError) ProtoMessage() {}

func (x *DataEntryError) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataEntryError.ProtoReflect.Descriptor instead.
func (*DataEntryError) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *DataEntryError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DataEntryError) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type StringArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	mi := &file_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArray.ProtoReflect.Descriptor instead.
func (*StringArray) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type BoolArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []bool                 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolArray) Reset() {
	*x = BoolArray{}
	mi := &file_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolArray) ProtoMessage() {}

func (x *BoolArray) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolArray.ProtoReflect.Descriptor instead.
func (*BoolArray) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *BoolArray) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type Int32Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"zigzag32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32Array) Reset() {
	*x = Int32Array{}
	mi := &file_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Array) ProtoMessage() {}

func (x *Int32Array) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Array.ProtoReflect.Descriptor instead.
func (*Int32Array) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *Int32Array) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Int64Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int64                `protobuf:"zigzag64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Array) Reset() {
	*x = Int64Array{}
	mi := &file_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Array) ProtoMessage() {}

func (x *Int64Array) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Array.ProtoReflect.Descriptor instead.
func (*Int64Array) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *Int64Array) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Uint32Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []uint32               `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint32Array) Reset() {
	*x = Uint32Array{}
	mi := &file_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Array) ProtoMessage() {}

func (x *Uint32Array) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Array.ProtoReflect.Descriptor instead.
func (*Uint32Array) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (x *Uint32Array) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Uint64Array struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []uint64               `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Uint64Array) Reset() {
	*x = Uint64Array{}
	mi := &file_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Array) ProtoMessage() {}

func (x *Uint64Array) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Array.ProtoReflect.Descriptor instead.
func (*Uint64Array) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *Uint64Array) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FloatArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []float32              `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatArray) Reset() {
	*x = FloatArray{}
	mi := &file_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatArray) ProtoMessage() {}

func (x *FloatArray) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatArray.ProtoReflect.Descriptor instead.
func (*FloatArray) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *FloatArray) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type DoubleArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []float64              `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoubleArray) Reset() {
	*x = DoubleArray{}
	mi := &file_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleArray) ProtoMessage() {}

func (x *DoubleArray) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleArray.ProtoReflect.Descriptor instead.
func (*DoubleArray) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *DoubleArray) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6b,
	0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x32, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x85, 0x06, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x12, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e,
	0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75,
	0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75,
	0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x6b,
	0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61,
	0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xca, 0x05, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6b, 0x75,
	0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x14, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61,
	0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75,
	0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6e, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x0a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x08, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0x0b,
	0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x10,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e,
	0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x12, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61,
	0x78, 0x22, 0x7b, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x7c,
	0x0a, 0x15, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x3f, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4d, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2e, 0x76, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x25, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x24, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x12, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0b,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2a, 0xa9, 0x05, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x31,
	0x36, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0a, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x14, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x17, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x33, 0x32, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f,
	0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x1b, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54,
	0x33, 0x32, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x10, 0x1d, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x1f, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x20, 0x2a, 0x71, 0x0a, 0x09,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x55, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x2a,
	0x7d, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x0a,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x14, 0x2a, 0x9c,
	0x03, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x55, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0a, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10,
	0x10, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x55, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x1e, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x28, 0x42, 0x0e, 0x5a,
	0x0c, 0x6b, 0x75, 0x6b, 0x73, 0x61, 0x2f, 0x76, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData []byte
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_types_proto_rawDesc), len(file_types_proto_rawDesc)))
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_types_proto_goTypes = []any{
	(DataType)(0),                  // 0: kuksa.val.v1.DataType
	(EntryType)(0),                 // 1: kuksa.val.v1.EntryType
	(View)(0),                      // 2: kuksa.val.v1.View
	(Field)(0),                     // 3: kuksa.val.v1.Field
	(*DataEntry)(nil),              // 4: kuksa.val.v1.DataEntry
	(*Datapoint)(nil),              // 5: kuksa.val.v1.Datapoint
	(*Metadata)(nil),               // 6: kuksa.val.v1.Metadata
	(*Actuator)(nil),               // 7: kuksa.val.v1.Actuator
	(*Sensor)(nil),                 // 8: kuksa.val.v1.Sensor
	(*Attribute)(nil),              // 9: kuksa.val.v1.Attribute
	(*ValueRestriction)(nil),       // 10: kuksa.val.v1.ValueRestriction
	(*ValueRestrictionInt)(nil),    // 11: kuksa.val.v1.ValueRestrictionInt
	(*ValueRestrictionUint)(nil),   // 12: kuksa.val.v1.ValueRestrictionUint
	(*ValueRestrictionFloat)(nil),  // 13: kuksa.val.v1.ValueRestrictionFloat
	(*ValueRestrictionString)(nil), // 14: kuksa.val.v1.ValueRestrictionString
	(*Error)(nil),                  // 15: kuksa.val.v1.Error
	(*DataEntryError)(nil),         // 16: kuksa.val.v1.DataEntryError
	(*StringArray)(nil),            // 17: kuksa.val.v1.StringArray
	(*BoolArray)(nil),              // 18: kuksa.val.v1.BoolArray
	(*Int32Array)(nil),             // 19: kuksa.val.v1.Int32Array
	(*Int64Array)(nil),             // 20: kuksa.val.v1.Int64Array
	(*Uint32Array)(nil),            // 21: kuksa.val.v1.Uint32Array
	(*Uint64Array)(nil),            // 22: kuksa.val.v1.Uint64Array
	(*FloatArray)(nil),             // 23: kuksa.val.v1.FloatArray
	(*DoubleArray)(nil),            // 24: kuksa.val.v1.DoubleArray
	(*timestamp.Timestamp)(nil),    // 25: google.protobuf.Timestamp
}
var file_types_proto_depIdxs = []int32{
	5,  // 0: kuksa.val.v1.DataEntry.value:type_name -> kuksa.val.v1.Datapoint
	5,  // 1: kuksa.val.v1.DataEntry.actuator_target:type_name -> kuksa.val.v1.Datapoint
	6,  // 2: kuksa.val.v1.DataEntry.metadata:type_name -> kuksa.val.v1.Metadata
	25, // 3: kuksa.val.v1.Datapoint.timestamp:type_name -> google.protobuf.Timestamp
	17, // 4: kuksa.val.v1.Datapoint.string_array:type_name -> kuksa.val.v1.StringArray
	18, // 5: kuksa.val.v1.Datapoint.bool_array:type_name -> kuksa.val.v1.BoolArray
	19, // 6: kuksa.val.v1.Datapoint.int32_array:type_name -> kuksa.val.v1.Int32Array
	20, // 7: kuksa.val.v1.Datapoint.int64_array:type_name -> kuksa.val.v1.Int64Array
	21, // 8: kuksa.val.v1.Datapoint.uint32_array:type_name -> kuksa.val.v1.Uint32Array
	22, // 9: kuksa.val.v1.Datapoint.uint64_array:type_name -> kuksa.val.v1.Uint64Array
	23, // 10: kuksa.val.v1.Datapoint.float_array:type_name -> kuksa.val.v1.FloatArray
	24, // 11: kuksa.val.v1.Datapoint.double_array:type_name -> kuksa.val.v1.DoubleArray
	0,  // 12: kuksa.val.v1.Metadata.data_type:type_name -> kuksa.val.v1.DataType
	1,  // 13: kuksa.val.v1.Metadata.entry_type:type_name -> kuksa.val.v1.EntryType
	10, // 14: kuksa.val.v1.Metadata.value_restriction:type_name -> kuksa.val.v1.ValueRestriction
	7,  // 15: kuksa.val.v1.Metadata.actuator:type_name -> kuksa.val.v1.Actuator
	8,  // 16: kuksa.val.v1.Metadata.sensor:type_name -> kuksa.val.v1.Sensor
	9,  // 17: kuksa.val.v1.Metadata.attribute:type_name -> kuksa.val.v1.Attribute
	14, // 18: kuksa.val.v1.ValueRestriction.string:type_name -> kuksa.val.v1.ValueRestrictionString
	11, // 19: kuksa.val.v1.ValueRestriction.signed:type_name -> kuksa.val.v1.ValueRestrictionInt
	12, // 20: kuksa.val.v1.ValueRestriction.unsigned:type_name -> kuksa.val.v1.ValueRestrictionUint
	13, // 21: kuksa.val.v1.ValueRestriction.floating_point:type_name -> kuksa.val.v1.ValueRestrictionFloat
	15, // 22: kuksa.val.v1.DataEntryError.error:type_name -> kuksa.val.v1.Error
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	file_types_proto_msgTypes[1].OneofWrappers = []any{
		(*Datapoint_String_)(nil),
		(*Datapoint_Bool)(nil),
		(*Datapoint_Int32)(nil),
		(*Datapoint_Int64)(nil),
		(*Datapoint_Uint32)(nil),
		(*Datapoint_Uint64)(nil),
		(*Datapoint_Float)(nil),
		(*Datapoint_Double)(nil),
		(*Datapoint_StringArray)(nil),
		(*Datapoint_BoolArray)(nil),
		(*Datapoint_Int32Array)(nil),
		(*Datapoint_Int64Array)(nil),
		(*Datapoint_Uint32Array)(nil),
		(*Datapoint_Uint64Array)(nil),
		(*Datapoint_FloatArray)(nil),
		(*Datapoint_DoubleArray)(nil),
	}
	file_types_proto_msgTypes[2].OneofWrappers = []any{
		(*Metadata_Actuator)(nil),
		(*Metadata_Sensor)(nil),
		(*Metadata_Attribute)(nil),
	}
	file_types_proto_msgTypes[6].OneofWrappers = []any{
		(*ValueRestriction_String_)(nil),
		(*ValueRestriction_Signed)(nil),
		(*ValueRestriction_Unsigned)(nil),
		(*ValueRestriction_FloatingPoint)(nil),
	}
	file_types_proto_msgTypes[7].OneofWrappers = []any{}
	file_types_proto_msgTypes[8].OneofWrappers = []any{}
	file_types_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_types_proto_rawDesc), len(file_types_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
